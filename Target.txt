1. All yelpdata => Grade
2. All grades => yelp rating
3. what violations contribute most for the grades
=> not about the score, but the relations. ex: if violating A3D, you may got an B.
4. Is some grading too harsh?
=> if you get a violation that are possibly to have a rank A but you don't, maybe it is too harsh this time.
5. Is some yelp rating too biased?


Cleaning:
INSPECTION_TYPE: 清掉reopening and non-operational
依照address和inspection_date去補grade


For decision tree:
category => Vector(1,0,0,0,0,0,0,0)

For vio_code => grade:
grade (A, B, C) = (3,4,6)

violation => yelp rating
viocode => 4.5
viocode => price
viocode => review_count
viocode => food category (in yelp)


// results
e.log:
5 -> 30.957752221077232 % // insp_date
73 -> 8.281264991283852 % // Czech
7 -> 7.363942545908202 % // African
4 -> 6.010676999342573 % // review_count
0 -> 5.86031552638739 % // latitude
d.log:
5 -> 38.286634520014005 % // insp_date
1 -> 16.52879993841639 % // longitude
4 -> 15.687229773946045 % // review_count
0 -> 12.228631774483826 % // latitude
3 -> 11.744901590359792 % // rating
2 -> 5.523802402779949 % // price

// results
(02A,(0.8,0.1,0.1))
(02B,(0.788111217641419,0.17833173537871524,0.03355704697986577))
(02C,(0.7727272727272727,0.18181818181818182,0.045454545454545456))
(02D,(0.25,0.5,0.25))
(02E,(1.0,0.0,0.0))
(02G,(0.790454884414616,0.16480238627889635,0.0447427293064877))
(02H,(0.6917562724014337,0.24372759856630824,0.06451612903225806))
(02I,(0.9230769230769231,0.07692307692307693,0.0))
(03A,(0.7777777777777778,0.16666666666666666,0.05555555555555555))
(03B,(1.0,0.0,0.0))
(03C,(0.6,0.0,0.4))
(04A,(0.6297117516629712,0.3325942350332594,0.037694013303769404))
(04C,(0.802547770700637,0.15286624203821655,0.044585987261146494))
(04D,(0.88,0.12,0.0))
(04E,(0.7142857142857143,0.2857142857142857,0.0))
(04F,(0.3333333333333333,0.0,0.6666666666666666))
(04H,(0.7493333333333333,0.20266666666666666,0.048))
(04J,(0.8,0.15384615384615385,0.046153846153846156))
(04K,(0.6637931034482759,0.2413793103448276,0.09482758620689655))
(04L,(0.7387755102040816,0.20979591836734693,0.05142857142857143))
(04M,(0.548936170212766,0.33191489361702126,0.11914893617021277))
(04N,(0.78125,0.17279411764705882,0.04595588235294118))
(04O,(1.0,0.0,0.0))
(05A,(0.8333333333333334,0.0,0.16666666666666666))
(05B,(0.5,0.5,0.0))
(05C,(1.0,0.0,0.0))
(05D,(0.7512953367875648,0.13989637305699482,0.10880829015544041))
(05E,(1.0,0.0,0.0))
(05F,(0.0,0.2857142857142857,0.7142857142857143))
(05H,(0.3103448275862069,0.6551724137931034,0.034482758620689655))
(06A,(0.8395061728395061,0.13991769547325103,0.0205761316872428))
(06B,(0.8647342995169082,0.12077294685990338,0.014492753623188406))
(06C,(0.8872476612506155,0.08419497784342689,0.028557360905957656))
(06D,(0.9109895574341124,0.06862257583291895,0.020387866732968673))
(06E,(0.847682119205298,0.12251655629139073,0.029801324503311258))
(06F,(0.870201096892139,0.09506398537477148,0.03473491773308958))
(06G,(0.25,0.0,0.75))
(08A,(0.7776148582600195,0.16617790811339198,0.056207233626588464))
(08B,(1.0,0.0,0.0))
(08C,(0.8604651162790697,0.10299003322259136,0.036544850498338874))
(09A,(0.9318181818181818,0.06818181818181818,0.0))
(09B,(0.8404255319148937,0.13120567375886524,0.028368794326241134))
(09C,(0.9110105580693816,0.06787330316742081,0.021116138763197588))
(10A,(0.8433734939759037,0.13253012048192772,0.024096385542168676))
(10B,(0.9161364950838635,0.06304222093695779,0.020821283979178717))
(10C,(0.9259259259259259,0.07407407407407407,0.0))
(10D,(1.0,0.0,0.0))
(10E,(0.9288888888888889,0.06222222222222222,0.008888888888888889))
(10F,(0.9424538545059717,0.040390879478827364,0.017155266015200867))
(10G,(1.0,0.0,0.0))
(10H,(0.9234167893961709,0.06332842415316642,0.013254786450662739))
(10I,(0.9501246882793017,0.04239401496259352,0.007481296758104738))
(10J,(0.9523809523809523,0.02976190476190476,0.017857142857142856))
(22F,(0.8873239436619719,0.056338028169014086,0.056338028169014086))
(22G,(1.0,0.0,0.0))
