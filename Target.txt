1. All yelpdata => Grade
2. All grades => yelp rating
3. what violations contribute most for the grades
=> not about the score, but the relations. ex: if violating A3D, you may got an B.
4. Is some grading too harsh?
=> if you get a violation that are possibly to have a rank A but you don't, maybe it is too harsh this time.
5. Is some yelp rating too biased?


Cleaning:
INSPECTION_TYPE: 清掉reopening and non-operational
依照address和inspection_date去補grade


For decision tree:
category => Vector(1,0,0,0,0,0,0,0)

For vio_code => grade:
grade (A, B, C) = (3,4,6)

violation => yelp rating
viocode => 4.5
viocode => price
viocode => review_count
viocode => food category (in yelp)


// random forest results
d.log:
accuracy = 0.4807692307692308
6 -> 53.22635667269591 % // violation_count
5 -> 18.66626754801863 % // inspection_date
1 -> 9.657393770860136 % // longitude
0 -> 8.412635530687638 % // latitude
4 -> 5.323705295017421 % // review_count
3 -> 3.704356515633722 % // rating
2 -> 1.009284667086538 % // price


// results
// violation_code -> (avgScore, grade inferred by avgScore)
(02A,(38.3,C))
(02B,(24.609665427509295,B))
(02C,(21.6,B))
(02D,(27.833333333333332,C))
(02F,(21.0,B))
(02G,(25.35816618911175,B))
(02H,(27.313432835820894,B))
(02I,(33.416666666666664,C))
(03A,(30.076923076923077,C))
(03C,(25.5,B))
(03G,(31.0,C))
(04A,(26.432773109243698,B))
(04B,(43.0,C))
(04C,(24.58108108108108,B))
(04D,(17.0,B))
(04E,(22.75,B))
(04F,(30.5,C))
(04H,(28.73658536585366,C))
(04J,(25.76595744680851,B))
(04K,(24.88235294117647,B))
(04L,(23.1899852724595,B))
(04M,(27.87547169811321,C))
(04N,(26.2096,B))
(04O,(22.0,B))
(05A,(37.0,C))
(05B,(44.0,C))
(05C,(42.42857142857143,C))
(05D,(29.828282828282827,C))
(05E,(31.428571428571427,C))
(05F,(45.416666666666664,C))
(05H,(36.61904761904762,C))
(06A,(23.497326203208555,B))
(06B,(23.28125,B))
(06C,(21.056506849315067,B))
(06D,(20.19796954314721,B))
(06E,(23.533980582524272,B))
(06F,(21.536585365853657,B))
(06G,(52.9,C))
(06I,(54.0,C))
(07A,(41.5,C))
(08A,(24.64969271290606,B))
(08B,(24.454545454545453,B))
(08C,(25.34027777777778,B))
(09A,(19.258064516129032,B))
(09B,(21.28181818181818,B))
(09C,(16.1875,B))
(10A,(18.52173913043478,B))
(10B,(18.545988258317024,B))
(10C,(14.166666666666666,B))
(10D,(14.25,B))
(10E,(19.58490566037736,B))
(10F,(14.309791332263242,B))
(10H,(19.367469879518072,B))
(10I,(17.06930693069307,B))
(10J,(16.607142857142858,B))
(22F,(30.454545454545453,C))
(22G,(17.6,B))

// results
// violation_code -> (probability of A, B, C)
(02A,(0.1,0.2,0.7))
(02B,(0.2342007434944238,0.4479553903345725,0.31784386617100374))
(02C,(0.4,0.2,0.4))
(02D,(0.0,0.5,0.5))
(02F,(0.0,1.0,0.0))
(02G,(0.20916905444126074,0.4455587392550143,0.3452722063037249))
(02H,(0.16417910447761194,0.4253731343283582,0.41044776119402987))
(02I,(0.25,0.16666666666666666,0.5833333333333334))
(03A,(0.07692307692307693,0.46153846153846156,0.46153846153846156))
(03C,(0.5,0.0,0.5))
(03G,(0.0,0.0,1.0))
(04A,(0.16806722689075632,0.44537815126050423,0.3865546218487395))
(04B,(0.0,0.0,1.0))
(04C,(0.1891891891891892,0.5,0.3108108108108108))
(04D,(0.5,0.25,0.25))
(04E,(0.75,0.0,0.25))
(04F,(0.0,0.5,0.5))
(04H,(0.17560975609756097,0.375609756097561,0.44878048780487806))
(04J,(0.3191489361702128,0.2765957446808511,0.40425531914893614))
(04K,(0.20588235294117646,0.4117647058823529,0.38235294117647056))
(04L,(0.1958762886597938,0.4683357879234168,0.33578792341678937))
(04M,(0.0830188679245283,0.44150943396226416,0.47547169811320755))
(04N,(0.192,0.384,0.424))
(04O,(0.5,0.0,0.5))
(05A,(0.0,0.0,1.0))
(05B,(0.0,0.0,1.0))
(05C,(0.14285714285714285,0.14285714285714285,0.7142857142857143))
(05D,(0.1919191919191919,0.35353535353535354,0.45454545454545453))
(05E,(0.2857142857142857,0.0,0.7142857142857143))
(05F,(0.0,0.041666666666666664,0.9583333333333334))
(05H,(0.0,0.35714285714285715,0.6428571428571429))
(06A,(0.2887700534759358,0.37433155080213903,0.33689839572192515))
(06B,(0.390625,0.34375,0.265625))
(06C,(0.3921232876712329,0.3356164383561644,0.2722602739726027))
(06D,(0.4416243654822335,0.3197969543147208,0.23857868020304568))
(06E,(0.3155339805825243,0.3592233009708738,0.32524271844660196))
(06F,(0.36585365853658536,0.3231707317073171,0.31097560975609756))
(06G,(0.0,0.0,1.0))
(06I,(0.0,0.0,1.0))
(07A,(0.0,0.0,1.0))
(08A,(0.2642669007901668,0.3476733977172959,0.3880597014925373))
(08B,(0.2727272727272727,0.0,0.7272727272727273))
(08C,(0.2847222222222222,0.3333333333333333,0.3819444444444444))
(09A,(0.41935483870967744,0.25806451612903225,0.3225806451612903))
(09B,(0.36363636363636365,0.39090909090909093,0.24545454545454545))
(09C,(0.58125,0.24375,0.175))
(10A,(0.5217391304347826,0.2608695652173913,0.21739130434782608))
(10B,(0.48140900195694714,0.2583170254403131,0.2602739726027397))
(10C,(0.8333333333333334,0.0,0.16666666666666666))
(10D,(0.6071428571428571,0.17857142857142858,0.21428571428571427))
(10E,(0.4339622641509434,0.20754716981132076,0.3584905660377358))
(10F,(0.5634028892455859,0.1942215088282504,0.24237560192616373))
(10H,(0.5240963855421686,0.22289156626506024,0.25301204819277107))
(10I,(0.5841584158415841,0.2376237623762376,0.1782178217821782))
(10J,(0.5,0.21428571428571427,0.2857142857142857))
(22F,(0.09090909090909091,0.45454545454545453,0.45454545454545453))
(22G,(0.6,0.2,0.2))
